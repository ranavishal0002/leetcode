# There are n seats and n students in a room. You are given an array seats of length n, where seats[i] is the position of the ith seat. You are also given the array students of length n, where students[j] is the position of the jth student.

You may perform the following move any number of times:

Increase or decrease the position of the ith student by 1 (i.e., moving the ith student from position x to x + 1 or x - 1)
Return the minimum number of moves required to move each student to a seat such that no two students are in the same seat.

Note that there may be multiple seats or students in the same position at the beginning.




########################### SOLUTION #######################################

class Solution {
    public int minMovesToSeat(int[] seats, int[] students) {
        
        // sort both arrays 
        Arrays.sort(seats);
        Arrays.sort(students);
        int count =0;

        // check the nearest place where student can be seated
        for(int i=0; i<seats.length; i++){
                // if(i !=students[i])

                // to avoid negative values
                count += Math.abs(students[i]- seats[i]) ;
        }
        return count;
        
    }
}
