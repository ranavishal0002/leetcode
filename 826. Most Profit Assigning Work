# You have n jobs and m workers. You are given three arrays: difficulty, profit, and worker where:

difficulty[i] and profit[i] are the difficulty and the profit of the ith job, and
worker[j] is the ability of jth worker (i.e., the jth worker can only complete a job with difficulty at most worker[j]).
Every worker can be assigned at most one job, but one job can be completed multiple times.

For example, if three workers attempt the same job that pays $1, then the total profit will be $3. If a worker cannot complete any job, their profit is $0.
Return the maximum profit we can achieve after assigning the workers to the jobs.



################################## SOLUTION ##########################################

class Solution {
    public int maxProfitAssignment(int[] difficulty, int[] profit, int[] worker) {
           int n = difficulty.length;
        List<Integer> jobs = new ArrayList<>();
        
        // Pairing difficulty and profit, and sorting jobs by difficulty
        for (int i = 0; i < n; i++) {
            jobs.add(i);
        }
        Collections.sort(jobs, (a, b) -> difficulty[a] - difficulty[b]);
        
        // Sorting workers by their abilities
        Arrays.sort(worker);
        
        int maxProfit = 0, i = 0, bestProfit = 0;
        
        for (int ability : worker) {
            // While the worker can perform the job
            while (i < n && difficulty[jobs.get(i)] <= ability) {
                bestProfit = Math.max(bestProfit, profit[jobs.get(i)]);
                i++;
            }
            maxProfit += bestProfit;
        }
        
        return maxProfit;
    }
}
