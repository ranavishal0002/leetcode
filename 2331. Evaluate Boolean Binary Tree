# You are given the root of a full binary tree with the following properties: 
Leaf nodes have either the value 0 or 1, where 0 represents False and 1 represents True.
Non-leaf nodes have either the value 2 or 3, where 2 represents the boolean OR and 3 represents the boolean AND.
The evaluation of a node is as follows:

If the node is a leaf node, the evaluation is the value of the node, i.e. True or False.
Otherwise, evaluate the node's two children and apply the boolean operation of its value with the children's evaluations.
Return the boolean result of evaluating the root node.

A full binary tree is a binary tree where each node has either 0 or 2 children.

A leaf node is a node that has zero children.


############################################## SOLUTION  ############################################################




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean evaluateTree(TreeNode root) {
        // If the root is null, return false because an empty tree is not true
        if (root == null)
            return false;

        // Check if the current node is a leaf node (no children)
        boolean isLeaf = root.left == null && root.right == null;

        // If it's a leaf node, return true if the value is 1, else return false
        if (isLeaf)
            return root.val == 1;

        // Recursively evaluate the left and right subtrees
        boolean left = evaluateTree(root.left);
        boolean right = evaluateTree(root.right);

        // If the node's value is 2, return the logical OR of the left and right subtree results
        if (root.val == 2)
            return left || right;
        else
            // If the node's value is 3, return the logical AND of the left and right subtree results
            return left && right;

    }
}
