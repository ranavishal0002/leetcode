# Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.




class Solution {
    public int subarraysDivByK(int[] nums, int k) {
         // HashMap to store the frequency of prefix sum remainders
        HashMap<Integer, Integer> map = new HashMap<>();

        map.put(0, 1);

        int count = 0; 
                int sum = 0;   

        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            // Calculate the remainder of the current prefix sum with k
            int rem = sum % k;
            if (rem < 0) {
                rem = rem + k;
            }
            if (map.containsKey(rem)) {
                count += map.get(rem); // Add the frequency of this remainder to count
                // Update the frequency of this remainder in the map
                map.put(rem, map.get(rem) + 1);
            } else {
                // If this remainder has not been seen before, add it to the map with frequency 1
                map.put(rem, 1);
            }
        }
        return count;
     
    }
}
