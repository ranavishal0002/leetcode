#   Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.

#   Return the sum of the three integers.  You may assume that each input would have exactly one solution.

####################################################  TWO POINTERS APPROACH #########################################################33
class Solution {
    public int threeSumClosest(int[] nums, int target) {
        int closestSum = Integer.MAX_VALUE; // Initialize closest sum to a large value
        int minDifference = Integer.MAX_VALUE; // Initialize minimum difference to a large value

        for (int i = 0; i < nums.length - 2; i++) {
            for (int j = i + 1; j < nums.length - 1; j++) {
                for (int k = j + 1; k < nums.length; k++) {
                    int sum = nums[i] + nums[j] + nums[k];
                    int difference = Math.abs(sum - target);

                    if (difference < minDifference) {
                        minDifference = difference;
                        closestSum = sum;
                    }
                }
            }
        }

        return closestSum;
    }
}


################################  USING SORT METHOD #######################################

class Solution {
    public int threeSumClosest(int[] nums, int target) {
        int closesum = Integer.MAX_VALUE; // Initialize closest sum to a large value
        int mindif = Integer.MAX_VALUE; // Initialize minimum difference to a large value
        Arrays.sort(nums);

        for(int i =0; i<nums.length; i++){
            int left =i+1; 
            int right =nums.length -1;

            while(left< right){
                int sum = nums[i] + nums[left] + nums[right];
                int dif = Math.abs(sum-target);

                if(dif < mindif){
                    mindif = dif;
                    closesum = sum ;
                }
                if(sum< target){
                    left++;
                }else {
                    right--;
                }
            }
        }
        return closesum;

    }
}
