#You are given the root of a binary tree with n nodes where each node in the tree has node.val coins. There are n coins in total throughout the whole tree.
 In one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent.
 Return the minimum number of moves required to make every node have exactly one coin.





######################################################### SOLUTION ###########################################################################




class Solution {
    public int ans;
    public int distributeCoins(TreeNode root) {
        ans = 0;
        count_steps(root);
        return ans;
    }
    public int count_steps(TreeNode root) {
        if (root == null) return 0;
        int left_coins = count_steps(root.left);
        int right_coins = count_steps(root.right);
        ans += Math.abs(left_coins) + Math.abs(right_coins);
        return (root.val - 1) + left_coins + right_coins;
    }
}
