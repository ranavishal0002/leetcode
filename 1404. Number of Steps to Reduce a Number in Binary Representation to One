# Given the binary representation of an integer as a string s, return the number of steps to reduce it to 1 under the following rules:

If the current number is even, you have to divide it by 2.

If the current number is odd, you have to add 1 to it.

It is guaranteed that you can always reach one for all test cases.



############################################### SOLUTION ###########################################################


import java.math.BigInteger;

class Solution {
    public int numSteps(String s) {
        int total_steps = 0;

        // Convert binary string to BigInteger
        BigInteger number = new BigInteger(s, 2);

        // Loop until the number is reduced to 1
        while (!number.equals(BigInteger.ONE)) {
            if (number.testBit(0)) { // Check if the number is odd
                number = number.add(BigInteger.ONE);
            } else { // If the number is even
                number = number.shiftRight(1); // Efficient division by 2
            }
            total_steps++;
        }

        return total_steps;
    }
}
